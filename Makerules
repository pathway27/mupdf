# Configuration for the Makefile

OS := $(shell uname)
OS := $(OS:MINGW%=MINGW)
OS := $(OS:MSYS%=MINGW)
OS := $(OS:Windows_NT=MINGW)
OS := $(OS:Darwin=MACOS)

ifeq ($(findstring -fembed-bitcode,$(XCFLAGS)),)
  # clang does not support these in combination with -fembed-bitcode
  CFLAGS += -ffunction-sections -fdata-sections
endif

ifeq ($(OS),MACOS)
  LDREMOVEUNREACH := -Wl,-dead_strip
  SO := dylib
else
  LDREMOVEUNREACH := -Wl,--gc-sections
  SO := so
endif

CFLAGS += -Wsign-compare

SANITIZE_FLAGS += -fsanitize=address
SANITIZE_FLAGS += -fsanitize=leak

ifeq ($(shared),yes)
  LIB_CFLAGS = -fPIC
  ifeq ($(OS),MACOS)
    LIB_LDFLAGS = -dynamiclib
  else
    LIB_LDFLAGS = -shared
  endif
else
  LIB_CFLAGS =
  LIB_LDFLAGS =
endif

ifeq ($(build),debug)
  CFLAGS += -pipe -g
  LDFLAGS += -g
else ifeq ($(build),release)
  CFLAGS += -pipe -O2 -DNDEBUG -fomit-frame-pointer
  LDFLAGS += $(LDREMOVEUNREACH) -Wl,-s
else ifeq ($(build),small)
  CFLAGS += -pipe -Os -DNDEBUG -fomit-frame-pointer
  LDFLAGS += $(LDREMOVEUNREACH) -Wl,-s
else ifeq ($(build),valgrind)
  CFLAGS += -pipe -O2 -DNDEBUG -DPACIFY_VALGRIND -fno-omit-frame-pointer
  LDFLAGS += $(LDREMOVEUNREACH) -Wl,-s
else ifeq ($(build),sanitize)
  CFLAGS += -pipe -g -fno-omit-frame-pointer $(SANITIZE_FLAGS)
  LDFLAGS += -g $(SANITIZE_FLAGS)
else ifeq ($(build),sanitize-release)
  CFLAGS += -pipe -O2 -DNDEBUG -fno-omit-frame-pointer $(SANITIZE_FLAGS)
  LDFLAGS += $(LDREMOVEUNREACH) -Wl,-s $(SANITIZE_FLAGS)
else ifeq ($(build),profile)
  CFLAGS += -pipe -O2 -DNDEBUG -pg
  LDFLAGS += -pg
else ifeq ($(build),coverage)
  CFLAGS += -pipe -g -pg -fprofile-arcs -ftest-coverage
  LIBS += -lgcov
else ifeq ($(build),native)
  CFLAGS += -pipe -O2 -DNDEBUG -fomit-frame-pointer -march=native
  LDFLAGS += $(LDREMOVEUNREACH) -Wl,-s
else ifeq ($(build),memento)
  CFLAGS += -pipe -g -DMEMENTO
  LDFLAGS += -g -rdynamic
  ifneq ($(HAVE_LIBDL),no)
    CFLAGS += -DHAVE_LIBDL
    ifeq ($(OS),OpenBSD)
      LIBS += -L /usr/local/lib -l execinfo
    else
      LIBS += -ldl
    endif
  endif
else ifeq ($(build),gperf)
  CFLAGS += -pipe -O2 -DNDEBUG -fomit-frame-pointer -DGPERF
  LIBS += -lprofiler
else
  $(error unknown build setting: '$(build)')
endif

ifeq ($(OS),OpenBSD)
  LDFLAGS += -pthread
endif

# Default system libraries
SYS_FREETYPE_LIBS := -lfreetype2
SYS_HARFBUZZ_LIBS := -lharfbuzz
SYS_JBIG2DEC_LIBS := -ljbig2dec
SYS_JPEGXR_LIBS := -ljpegxr
SYS_LCMS2_LIBS := -llcms2
SYS_LIBJPEG_LIBS := -ljpeg
SYS_MUJS_LIBS := -lmujs
SYS_OPENJPEG_LIBS := -lopenjp2
SYS_ZLIB_LIBS := -lz
SYS_TESSERACT_LIBS := -ltesseract
SYS_LEPTONICA_LIBS := -llept

ifneq "$(CLUSTER)" ""
  CFLAGS += -DCLUSTER
endif

ifeq ($(OS),MINGW)
  WINDRES := windres
  HAVE_WIN32 := yes

else ifeq ($(OS),MACOS)
  HAVE_GLUT := yes
  SYS_GLUT_CFLAGS := -Wno-deprecated-declarations
  SYS_GLUT_LIBS := -framework GLUT -framework OpenGL
  CC = xcrun cc
  AR = xcrun ar
  LD = xcrun ld
  RANLIB = xcrun ranlib

else ifeq ($(OS),Linux)
  HAVE_OBJCOPY := yes

  ifeq ($(shell pkg-config --exists freetype2 && echo yes),yes)
	SYS_FREETYPE_CFLAGS := $(shell pkg-config --cflags freetype2)
	SYS_FREETYPE_LIBS := $(shell pkg-config --libs freetype2)
  endif
  ifeq ($(shell pkg-config --exists gumbo && echo yes),yes)
	SYS_GUMBO_CFLAGS := $(shell pkg-config --cflags gumbo)
	SYS_GUMBO_LIBS := $(shell pkg-config --libs gumbo)
  endif
  ifeq ($(shell pkg-config --exists harfbuzz && echo yes),yes)
	SYS_HARFBUZZ_CFLAGS := $(shell pkg-config --cflags harfbuzz)
	SYS_HARFBUZZ_LIBS := $(shell pkg-config --libs harfbuzz)
  endif
  ifeq ($(shell pkg-config --exists lcms2 && echo yes),yes)
	SYS_LCMS2_CFLAGS := $(shell pkg-config --cflags lcms2)
	SYS_LCMS2_LIBS := $(shell pkg-config --libs lcms2)
  endif
  ifeq ($(shell pkg-config --exists libjpeg && echo yes),yes)
	SYS_LIBJPEG_CFLAGS := $(shell pkg-config --cflags libjpeg)
	SYS_LIBJPEG_LIBS := $(shell pkg-config --libs libjpeg)
  endif
  ifeq ($(shell pkg-config --exists libopenjp2 && echo yes),yes)
	SYS_OPENJPEG_CFLAGS := $(shell pkg-config --cflags libopenjp2)
	SYS_OPENJPEG_LIBS := $(shell pkg-config --libs libopenjp2)
  endif
  ifeq ($(shell pkg-config --exists zlib && echo yes),yes)
	SYS_ZLIB_CFLAGS := $(shell pkg-config --cflags zlib)
	SYS_ZLIB_LIBS := $(shell pkg-config --libs zlib)
  endif

  HAVE_LEPTONICA := $(shell pkg-config --exists 'lept >= 1.7.4' && echo yes)
  ifeq ($(HAVE_LEPTONICA),yes)
	SYS_LEPTONICA_CFLAGS := $(shell pkg-config --cflags lept)
	SYS_LEPTONICA_LIBS := $(shell pkg-config --libs lept)
  endif

  HAVE_TESSERACT := $(shell pkg-config --exists 'tesseract-ocr >= 4.0.0' && echo yes)
  ifeq ($(HAVE_TESSERACT),yes)
	SYS_TESSERACT_CFLAGS := $(shell pkg-config --cflags tesseract)
	SYS_TESSERACT_LIBS := $(shell pkg-config --libs tesseract)
  endif

  HAVE_SYS_CURL := $(shell pkg-config --exists libcurl && echo yes)
  ifeq ($(HAVE_SYS_CURL),yes)
	SYS_CURL_CFLAGS := $(shell pkg-config --cflags libcurl)
	SYS_CURL_LIBS := $(shell pkg-config --libs libcurl)
  endif

  HAVE_GLUT := yes
  ifeq ($(HAVE_GLUT),yes)
	SYS_GLUT_CFLAGS :=
	SYS_GLUT_LIBS := -lglut -lGL
  endif

  HAVE_X11 := $(shell pkg-config --exists x11 xext && echo yes)
  ifeq ($(HAVE_X11),yes)
	X11_CFLAGS := $(shell pkg-config --cflags x11 xext)
	X11_LIBS := $(shell pkg-config --libs x11 xext)
  endif

  HAVE_LIBCRYPTO := $(shell pkg-config --exists 'libcrypto >= 1.1.0' && echo yes)
  ifeq ($(HAVE_LIBCRYPTO),yes)
	LIBCRYPTO_CFLAGS := $(shell pkg-config --cflags libcrypto) -DHAVE_LIBCRYPTO
	LIBCRYPTO_LIBS := $(shell pkg-config --libs libcrypto)
  endif

  HAVE_PTHREAD := yes
  ifeq ($(HAVE_PTHREAD),yes)
	PTHREAD_CFLAGS :=
	PTHREAD_LIBS := -lpthread
  endif

endif

# The following section has various cross compilation configurations.
#
# Invoke these as:
#      make OS=mingw32-cross
#
# This does rely on the generated directory being populated with the font files.
# On a unix-like system, run 'make generate' before doing the cross compile.
# On Windows, run 'nmake -f scripts\fontdump.nmake' in a Visual Studio command prompt.

ifeq "$(OS)" "wasm"
  OUT := build/wasm/$(build)
  CC = emcc
  CXX = em++
  AR = emar
  HAVE_GLUT=no
  HAVE_X11=no
  HAVE_OBJCOPY=no
  HAVE_LIBCRYPTO=no
endif

ifeq "$(OS)" "mingw32-cross"
  OUT := build/$(OS)/$(build)
  CC = i686-w64-mingw32-gcc
  CXX = i686-w64-mingw32-g++
  LD = i686-w64-mingw32-gcc
  AR = i686-w64-mingw32-ar
  WINDRES = i686-w64-mingw32-windres
  HAVE_WIN32=yes
endif

ifeq "$(OS)" "mingw64-cross"
  OUT := build/$(OS)/$(build)
  CC = x86_64-w64-mingw32-gcc
  CXX = x86_64-w64-mingw32-g++
  LD = x86_64-w64-mingw32-gcc
  AR = x86_64-w64-mingw32-ar
  WINDRES = x86_64-w64-mingw32-windres
  HAVE_WIN32=yes
endif

# The following section is an example of how to simply do cross-compilation
# using these Makefiles. It builds for a beagleboard running ARM linux,
# compiling on windows with the CodeSourcery G++ compilers.
# Invoke this as:
#      make OS=beagle-cross build=release
# This does rely on the generated directory being populated with the cmap
# files etc first. Either:
#   1) do 'make generate' first (this relies on you having an appropriate host
#   base C compiler set up - such as you would have on unix or in windows
#   cygwin)
#   2) do a non cross compile build (e.g. windows in MSVC) first.
#   3) download the generated files from mupdf.com.

# make OS=vita HAVE_X11=no HAVE_GLUT=no build=release
ifeq "$(OS)" "vita"
PREFIX  :=	arm-vita-eabi-
CC	:=	$(PREFIX)gcc
LD  := $(PREFIX)gcc
CXX	:=	$(PREFIX)g++
AS	:=	$(PREFIX)as
AR	:=	$(PREFIX)gcc-ar
OBJCOPY	:=	$(PREFIX)objcopy
STRIP	:=	$(PREFIX)strip
NM	:=	$(PREFIX)gcc-nm
RANLIB	:=	$(PREFIX)gcc-ranlib
CFLAGS += -Wl,-q -Wall -O3 -Wno-unused-variable
ASFLAGS = $(CFLAGS)
CROSSCOMPILE=yes
HAVE_PTHREAD := yes
SYS_PTHREAD_CFLAGS :=
SYS_PTHREAD_LIBS := -lpthread
endif

ifeq "$(OS)" "switch"
PREFIX  :=	aarch64-none-elf-
CC	:=	$(PREFIX)gcc
LD  := $(PREFIX)gcc
CXX	:=	$(PREFIX)g++
AS	:=	$(PREFIX)as
AR	:=	$(PREFIX)gcc-ar
OBJCOPY	:=	$(PREFIX)objcopy
STRIP	:=	$(PREFIX)strip
NM	:=	$(PREFIX)gcc-nm
RANLIB	:=	$(PREFIX)gcc-ranlib

ARCH	 :=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE
LDFLAGS	 :=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

CFLAGS +=	-g -Wall -O2 -ffunction-sections $(ARCH) $(DEFINES) -DCMS_NO_PTHREADS
CFLAGS	 +=	$(INCLUDE) -I$(DEVKITPRO)/aarch64-none-elf/include -D__SWITCH__ $(LDFLAGS) # -D_GNU_SOURCE

CXXFLAGS := $(CFLAGS) -fno-rtti -fno-exceptions -std=gnu11 dDD #-std=gnu++0x

ASFLAGS	 :=	-g $(ARCH)

CROSSCOMPILE=yes
endif

ifeq "$(OS)" "beagle-cross"
CC = arm-none-linux-gnueabi-gcc
CXX = arm-none-linux-gnueabi-g++
LD = arm-none-linux-gnueabi-gcc
AR = arm-none-linux-gnueabi-ar
CFLAGS += -O3 -mfpu=neon -mcpu=cortex-a8 -mfloat-abi=softfp -ftree-vectorize -ffast-math -fsingle-precision-constant
CROSSCOMPILE=yes
HAVE_PTHREAD := yes
SYS_PTHREAD_CFLAGS :=
SYS_PTHREAD_LIBS := -lpthread
endif

ifeq "$(OS)" "webos-pre-cross"
CC = arm-none-linux-gnueabi-gcc
CXX = arm-none-linux-gnueabi-g++
LD = arm-none-linux-gnueabi-gcc
AR = arm-none-linux-gnueabi-ar
CFLAGS += -O3 -mcpu=cortex-a8 -mfpu=neon -mfloat-abi=softfp -ftree-vectorize -ffast-math -fsingle-precision-constant
CROSSCOMPILE=yes
endif

ifeq "$(OS)" "webos-pixi-cross"
CC = arm-none-linux-gnueabi-gcc
CXX = arm-none-linux-gnueabi-g++
LD = arm-none-linux-gnueabi-gcc
AR = arm-none-linux-gnueabi-ar
CFLAGS += -O3 -mcpu=arm1136jf-s -mfpu=vfp -mfloat-abi=softfp -ffast-math -fsingle-precision-constant
CROSSCOMPILE=yes
endif

ifeq "$(OS)" "w64_x86-cross-mingw32"
CC = i686-w64-mingw32-gcc
CXX = i686-w64-mingw32-g++
LD = i686-w64-mingw32-gcc
AR = i686-w64-mingw32-ar
WINDRES = i686-w64-mingw32-windres
CROSSCOMPILE=yes
HAVE_WIN32=yes
endif

ifeq "$(OS)" "w64_amd64-cross-mingw32"
CC = x86_64-w64-mingw32-gcc
CXX = x86_64-w64-mingw32-g++
LD = x86_64-w64-mingw32-gcc
AR = x86_64-w64-mingw32-ar
WINDRES = x86-64-mingw32-windres
CROSSCOMPILE=yes
HAVE_WIN32=yes
endif

ifeq "$(OS)" "pnacl-cross"
VALID_TOOLCHAINS := pnacl
TARGET = mupdf
include $(NACL_SDK_ROOT)/tools/common.mk
CC = $(PNACL_CC)
CXX = $(PNACL_CXX)
LD = $(PNACL_LD)
AR = $(PNACL_LIB)
CFLAGS += -D__NACL__
CROSSCOMPILE=yes
endif

# Don't install libjpeg, libz, or libfreetype, since these are already
# provided by naclports and the versions compiled here cause problems
# with nacl.
install-nacl-libs: $(OUT)/libmupdf.a $(OUT)/libmujs.a $(OUT)/libjbig2dec.a $(OUT)/libopenjpeg.a
	install -d $(LIBDIR)/$(TOOLCHAIN)/$(CONFIG)/
	install $(OUT)/libmupdf.a $(OUT)/libmujs.a $(OUT)/libjbig2dec.a $(OUT)/libopenjpeg.a $(LIBDIR)/$(TOOLCHAIN)/$(CONFIG)/

# Most variables when building for iOS are set up in ios/build_libs.sh,
# which is called from the Xcode project as a "Run Script" build step.
# The following section works for both device and simulator builds.
ifeq "$(OS)" "ios"
  CC = xcrun cc
  CXX = xcrun c++
  AR = xcrun ar
  LD = xcrun ld
  RANLIB = xcrun ranlib
endif
